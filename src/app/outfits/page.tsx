"use client";

import { useState, useEffect } from "react";
import { OutfitGrid } from "~/app/_components/outfit-grid";

export default function OutfitsPage() {
  const [searchQuery, setSearchQuery] = useState("");
  const [outfits, setOutfits] = useState<string[]>([]);
  const [isLoading, setIsLoading] = useState(true);

  // Load outfits from localStorage when component mounts
  useEffect(() => {
    try {
      const savedOutfits = localStorage.getItem('generatedOutfits');
      if (savedOutfits) {
        const parsedOutfits = JSON.parse(savedOutfits);
        console.log('Loaded outfits from localStorage:', parsedOutfits.length);
        setOutfits(parsedOutfits);
      }
    } catch (error) {
      console.error('Error loading outfits from localStorage:', error);
    } finally {
      setIsLoading(false);
    }
  }, []);

  // Save outfits to localStorage whenever they change
  useEffect(() => {
    if (!isLoading) {
      try {
        console.log('Saving outfits to localStorage:', outfits.length);
        localStorage.setItem('generatedOutfits', JSON.stringify(outfits));
      } catch (error) {
        console.error('Error saving outfits to localStorage:', error);
      }
    }
  }, [outfits, isLoading]);

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault();
    // This would be connected to the backend later
    console.log("Searching for outfits with query:", searchQuery);
    
    // For demo purposes, let's add a placeholder outfit
    // In a real app, this would be generated by the backend
    if (searchQuery.trim()) {
      // Get wardrobe images to potentially use in the outfit
      const wardrobeImages = localStorage.getItem('wardrobeImages');
      let newOutfit = '';
      
      if (wardrobeImages) {
        try {
          const images = JSON.parse(wardrobeImages);
          console.log('Found wardrobe images:', images.length);
          if (images.length > 0) {
            // Use a random image from the wardrobe as a placeholder
            const randomIndex = Math.floor(Math.random() * images.length);
            newOutfit = images[randomIndex];
            console.log('Selected random image at index:', randomIndex);
          }
        } catch (error) {
          console.error('Error parsing wardrobe images:', error);
        }
      }
      
      // If we have a new outfit, add it to the list
      if (newOutfit) {
        console.log('Adding new outfit to the list');
        setOutfits(prevOutfits => [newOutfit, ...prevOutfits]);
        setSearchQuery(''); // Clear the search query
      } else {
        console.log('No wardrobe images found to create an outfit');
      }
    }
  };

  return (
    <div className="py-8">
      <h1 className="text-3xl font-light mb-8">your outfits</h1>
      
      {/* Search Bar */}
      <form onSubmit={handleSearch} className="mb-8">
        <div className="relative">
          <input
            type="text"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            placeholder="describe your perfect outfit..."
            className="w-full bg-gray-800 text-white rounded-lg py-3 px-4 pr-10 focus:outline-none focus:ring-2 focus:ring-gray-700"
          />
          <button
            type="submit"
            className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-5 w-5"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
              />
            </svg>
          </button>
        </div>
      </form>
      
      {/* Outfit Grid */}
      <OutfitGrid outfits={outfits} />
    </div>
  );
} 